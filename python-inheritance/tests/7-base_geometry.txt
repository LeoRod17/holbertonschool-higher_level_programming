>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
TypeError: name must be an integer

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
ValueError: age must be greater than 0

>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
ValueError: distance must be greater than 0

>>> bg.integer_validator("false", true)
Traceback (most recent call last):
NameError: name 'true' is not defined

>>> bg.integer_validator("floating", -4.5)
Traceback (most recent call last):
TypeError: floating must be an integer

>>> bg.integer_validator("my_int", 12)

>>> bg.integer_validator("my_limit",float("inf"))
Traceback (most recent call last):
TypeError: my_limit must be an integer

>>> bg.integer_validator("my_nothing",float("nan"))
Traceback (most recent call last):
TypeError: my_nothing must be an integer

>>> bg.integer_validator("", 15)

>>> bg.integer_validator("my_empty",)
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator(, 1)
Traceback (most recent call last):
SyntaxError: invalid syntax

>>> bg.integer_validator("My_bool", True)
Traceback (most recent call last):
TypeError: My_bool must be an integer

>>> bg.integer_validator("My_Lies", False)
Traceback (most recent call last):
TypeError: My_Lies must be an integer

>>> bg.integer_validator("floating", 10.9)
Traceback (most recent call last):
TypeError: floating must be an integer

>>> bg.integer_validator(10.8, 10)

>>> bg.integer_validator(True, 6)

>>> bg.integer_validator(1, 10)

>>> bg.integer_validator("Lists", [10, 11, 12, 13, 14, 15])
Traceback (most recent call last):
TypeError: Lists must be an integer

>>> bg.integer_validator("Limits", 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)

>>> bg.integer_validator("Minus", -55)
Traceback (most recent call last):
ValueError: Minus must be greater than 0

>>> bg.integer_validator("ListsS", ["a", "b", "c", "d", "e", "f"])
Traceback (most recent call last):
TypeError: ListsS must be an integer

>>> bg.integer_validator("emp","")
Traceback (most recent call last):
TypeError: emp must be an integer

>>> bg.integer_validator("tuple", (1, 2))
Traceback (most recent call last):
TypeError: tuple must be an integer

>>> bg.integer_validator("dictionary", {"a": 1, "b": 2})
Traceback (most recent call last):
TypeError: dictionary must be an integer

>>> bg.integer_validator("tupleA", ())
Traceback (most recent call last):
TypeError: tupleA must be an integer

>>> bg.integer_validator("dictionaryA", {})
Traceback (most recent call last):
TypeError: dictionaryA must be an integer

>>> bg.integer_validator("Non", None)
Traceback (most recent call last):
TypeError: Non must be an integer

>>> bg.integer_validator ("Not")
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator (, 1)
Traceback (most recent call last):
SyntaxError: invalid syntax

>>> bg.integer_validator("LimitsM", -1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
Traceback (most recent call last):
ValueError: LimitsM must be greater than 0